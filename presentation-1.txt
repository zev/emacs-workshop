# This is a test presentation using epresent.el
* @M-x ruby-and-emacs-workshop

** This is some text about what we are going to do for this workshop.

* Outline
@toc

* @Objectives

** To learn more about using Emacs efficiently.

** Focusing on coding in Ruby

** To show off cool new tricks

** Everyone gets a bit better

* @Setup

** Make sure everyone has Emacs running and at a reasonable version

** Perhaps setup a small virtual box VM image with Emacs.
# The question is will there be a fast enough method to distribute
# this image and vbox to the members?  CDs USB drives?

* @Basics
** Open/Save file
** Quit
** up/down/left/right
** by words
** Copy/paste
** undo

* Opening / Saving files

** [ C-x C-f ] Opens a file

** [ C-x C-s ] Saves a file

* Quitting

** [ C-x C-c ] Quits

* Cancel what you are doing

** [ C-g ] cancel whatever you are doing

* Moving around

** [ C-p or up arrow ] move up a line
** [ C-n or down arrow ] move down a line
** [ C-b or left arrow ] move back a character
** [ C-f or right arrow ] move forward a character

* Moving faster

** [ M-f ] move forward a word
** [ M-b ] move backward a word
** [ C-a ] move to the beginning of a line
** [ C-e ] move to the end of a line
** [ M-< ] move to the begging of the buffer
** [ M-> ] move to the end of the buffer
** [ C-s ] search forward
** [ C-r ] search backward
** [ C-s C-s ] repeat last search

* Copy / Paste

** [C-space] start mark
** [M-w] copy region
** [C-w] cut region
** [C-y] paste/yank region
** [M-y] cycle through yanks

* Other deletions
** [M-d] delete forward word
** [M-DEL] delete previous word

* Undo

** [ C-x u ]

** [ C-\ ]


* A few more good to know options

** Select all
** Split windows moving  around buffers

* M-x

** Call any interactive function

** Good way to explore features

* Getting Help
** Describing modes
** Looking up functions and variables
** Keys for a mode

* @Helpful modes
** ido-mode
** anything.el
# Don't get dragged down into the details of these modes until
# later. But it might be good to let members know about them now?

* @Ruby
** Navigation
   [C-down] go to next empty line
   [C-up] go to previous line comint-previous-input
   # This actually jumps the empty lines

   [C-M-a] beginning of defun
   [C-M-e] end of defun
   # both of these seem to take me to the top of the class versus defs

   [C-M-f] forward sexp
   [C-M-b] backward sexp
   # This depends upon where the cursor is

   [C-M-n] end of block
   [C-M-p] beginning of block
   # These tend to be a bit more understandable

   [C-M-q] indent-exp based on indent level of def



** next def
** select def
** Commenting

** Ruby-mode and sending to inf-ruby
   [C-c C-b] send block
   [C-c C-x] [C-M-x] send definition
   # I find that these two methods are unreliable as to what the
   send. it is probably just me, so I want someone else to show me the
   light.

   [C-c C-l] load file
   [C-c C-r] send region
   # These two are reliable
   [C-c C-z] switch to inf mode


** electric mode

** IRB interaction

   #[C-x C-e] send last line of code to ruby process

   [C-c M-r] send region and go




** GDB


* Referencing documentation
** Ri yari the many others

* @Finding code
** Grep
** M-x occur
** TAGS
** Other modes to help
* Grepping
** M-x grep
** M-x rgrep
** my horrible grep hacks
* TAGS
http://www.gnu.org/software/emacs/manual/html_node/emacs/Select-Tags-Table.html#Select-Tags-Table

* Other Ruby tools
** Rails/Rinari
** Textmate-mode
** Snippets

# ruby hide show custom elide
# hs-mode does not seem to actually hide any ruby code.

(defun elide-greater ()
  "Set selective display hiding anything greater than the current column
that the cursor is on."
   (interactive "")
   (set-selective-display (+ (current-column) 1)))

(global-set-key "\C-c." 'elide-greater)



* @Source Control
** VC
** Magit
**source control usage of reverting changes.
** making commits
** git.el # same thing as vc- or plugs into it?

* @Challenges
** query-replace across multiple files.
** tags offers this
** Updating changelog with commit messages?
**show annotate and viewing previous versions etc..
** pet peeve how to fix mixed indented code in read only file for
*temporary viewing.


http://emacs.wordpress.com/2007/01/
http://www.emacswiki.org/emacs/EmacsObjectOrientedProgrammingSystem

* @Show off time
** Let's see what you can teach us!
** modes, tools
** workflow etc..

# these below are just reference for me on how epresent works
# For code using (progn) in presentation-runner is better.
# images though are probably better here
** Having fun
* Show some code
=class Hoge=
=  def foo=
=    "bar"=
=  end=
=end=
* Image
[/Users/Zev/projects/emacs-workshop/images/intro.jpg Fun times!]
